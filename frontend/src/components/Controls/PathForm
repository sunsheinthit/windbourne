import { useState } from "react";
import axios from "axios";
import "PathForm.css";

function PathForm({ onPathCalculated }) {
  const [startCity, setStartCity] = useState("");
  const [endCity, setEndCity] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Function to convert city to coordinates using OpenStreetMap Nominatim API
  const getCityCoordinates = async (city) => {
    try {
      const response = await axios.get(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(
          city
        )}`
      );
      if (response.data && response.data.length > 0) {
        return {
          latitude: parseFloat(response.data[0].lat),
          longitude: parseFloat(response.data[0].lon),
        };
      }
      throw new Error(`Could not find coordinates for ${city}`);
    } catch (error) {
      throw new Error(
        `Error getting coordinates for ${city}: ${error.message}`
      );
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // Get coordinates for both cities
      const startCoords = await getCityCoordinates(startCity);
      const endCoords = await getCityCoordinates(endCity);

      // Call backend to find nearest balloons and calculate path
      const response = await axios.post(
        "http://localhost:8000/calculate-path",
        {
          start_city: startCoords,
          end_city: endCoords,
        }
      );

      onPathCalculated(response.data);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={styles.formContainer}>
      <form onSubmit={handleSubmit} style={styles.form}>
        <div style={styles.inputGroup}>
          <input
            type="text"
            value={startCity}
            onChange={(e) => setStartCity(e.target.value)}
            placeholder="Start City"
            style={styles.input}
          />
        </div>
        <div style={styles.inputGroup}>
          <input
            type="text"
            value={endCity}
            onChange={(e) => setEndCity(e.target.value)}
            placeholder="End City"
            style={styles.input}
          />
        </div>
        <button type="submit" disabled={loading} style={styles.button}>
          {loading ? "Calculating..." : "Calculate Path"}
        </button>
      </form>
      {error && <div style={styles.error}>{error}</div>}
    </div>
  );
}

export default PathForm;
